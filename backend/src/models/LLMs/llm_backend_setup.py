# -*- coding: utf-8 -*-
"""llm_backend_setup.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sy4Jp1nAwqWT7023EypGRTz5riFqnZFp
"""

!pip install anthropic pandas

import pandas as pd

def clean_data(input_file, output_file=None):

    if output_file is None:
        output_file = 'cleaned.csv'
    df = pd.read_csv(input_file)

    cleaned_df = df[~df['response'].str.contains('Class', na=False)]
    cleaned_df = cleaned_df.drop(columns=['group'])
    cleaned_df.to_csv(output_file, index=False)
    return output_file

input_file = 'data_file_from_svm.csv'
cleaned_file = clean_data(input_file)

import pandas as pd
import logging
from anthropic import Anthropic
import traceback

def get_broad_categories(themes, client):
    prompt = f"""
    You are an expert in thematic analysis. Given the following list of themes,
    group them into broad, overarching categories (MAXIMUM 10) that capture their main ideas.

    Themes:
    {', '.join(themes)}

    Provide ONLY a comma-separated list of categories, with no explanations.
    """

    response = client.messages.create(
        model="claude-3-opus-20240229",
        max_tokens=300,
        messages=[{"role": "user", "content": prompt}]
    )

    categories = response.content[0].text.strip().split(',')
    categories = [cat.strip() for cat in categories]

    if len(categories) > 10:
        categories = categories[:10]
    return categories

def classify_response(response, categories, client):
    prompt = f"""
    Categorize the following response into the most relevant categories from this list:
    {', '.join(categories)}

    Response:
    "{response}"

    Return only a comma-separated list of categories it belongs to, with no explanations.
    """

    response = client.messages.create(
        model="claude-3-opus-20240229",
        max_tokens=300,
        messages=[{"role": "user", "content": prompt}]
    )

    classified_categories = response.content[0].text.strip().split(',')
    classified_categories = [cat.strip() for cat in classified_categories]

    return classified_categories

def process_dataset(input_csv, output_csv, api_key):
    df = pd.read_csv(input_csv)

    client = Anthropic(api_key=api_key)
    themes = df['theme'].dropna().unique().tolist()
    categories = get_broad_categories(themes, client)

    output_columns = ['response', 'theme'] + categories
    output_rows = []
    for _, row in df.iterrows():
        response = row['response']
        classified_categories = classify_response(response, categories, client)
        output_row = {'response': response, 'theme': row['theme']}
        for cat in categories:
            output_row[cat] = 'Yes' if cat in classified_categories else 'No'
        output_rows.append(output_row)

    output_df = pd.DataFrame(output_rows, columns=output_columns)
    output_df.to_csv(output_csv, index=False)

process_dataset('cleaned.csv', 'output.csv', "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")
